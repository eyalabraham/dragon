/********************************************************************
 * .h
 *
 *  Auto-generated by lst2h.awk
 *
 *******************************************************************/

#define     LOAD_ADDRESS    0x0000      // Change as required
#define     RUN_ADDRESS     0x0000      // Change as required

int code[] =
{
    /* Auto generated from branch.lst
     */
                                        //      ;
                                        //      ; branch.asm
                                        //      ;
                                        //      ; MC6809E emulator test code for branching.
                                        //      ; Test for command correctness and flag settings.
                                        //      ; All tests will use direct or immediate addressing for simplicity,
                                        //      ; other addressing modes will be tested separately.
                                        //      ;
    0x7e, 0x00, 0x09,                   // 0000             jmp     start
                                        //      ;
                                        // 0001 setcf:      equ     $01
                                        // 00fe clrcf:      equ     $fe
                                        //      ;
                                        // 0003 varstart    equ     *
                                        //      ;
    0xff,                               // 0003 var0:       fcb     $ff
    0x55,                               // 0004 var1:       fcb     $55
    0xaa,                               // 0005 var2:       fcb     $aa
    0x01,                               // 0006 var3:       fcb     $01
    0x80,                               // 0007 var4:       fcb     $80
    0x00,                               // 0008 var5:       fcb     $00
                                        //      ;
                                        // 0009 varend:     equ     *
                                        // 0006 varlen:     equ     varend-varstart
                                        //      ;
    0x1c, 0x00,                         // 0009 start:      andcc   #0              ; zero CC bits
                                        //      ;
    0x86, 0x38,                         // 000b             lda     #56
    0x81, 0x38,                         // 000d             cmpa    #56
    0x26, 0x2e,                         // 000f             bne     fail
    0x25, 0x2c,                         // 0011             bcs     fail
    0x2b, 0x2a,                         // 0013             bmi     fail
    0x29, 0x28,                         // 0015             bvs     fail
    0x22, 0x26,                         // 0017             bhi     fail
                                        //      ;
    0x81, 0x29,                         // 0019             cmpa    #41
    0x27, 0x22,                         // 001b             beq     fail
    0x2f, 0x20,                         // 001d             ble     fail
    0x2d, 0x1e,                         // 001f             blt     fail
                                        //      ;
    0x81, 0x3a,                         // 0021             cmpa    #58
    0x2e, 0x1a,                         // 0023             bgt     fail
    0x2c, 0x18,                         // 0025             bge     fail
    0x24, 0x16,                         // 0027             bhs     fail
                                        //      ;
    0x86, 0x56,                         // 0029             lda     #$56
    0x8b, 0x56,                         // 002b             adda    #$56
    0x28, 0x10,                         // 002d             bvc     fail
                                        //      ;
    0x86, 0x9a,                         // 002f             lda     #$9a
    0x8b, 0x9a,                         // 0031             adda    #$9a
    0x28, 0x0a,                         // 0033             bvc     fail
                                        //      ;
    0x86, 0x9a,                         // 0035             lda     #$9a
    0x8b, 0x56,                         // 0037             adda    #$56
    0x29, 0x04,                         // 0039             bvs     fail
                                        //      ;
    0x1c, 0x00,                         // 003b pass:       andcc   #0              ; Clear CC.C to indicate pass
    0x20, 0x02,                         // 003d             bra     done
    0x1a, 0x01,                         // 003f fail:       orcc    #1              ; Set CC.C to indicate fail
    0x12,                               // 0041 done:       nop
                                        //      ;
                                        //      ; End of test
   -1,                                  // --- end of code ---
};
