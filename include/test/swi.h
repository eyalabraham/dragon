/********************************************************************
 * .h
 *
 *  Auto-generated by lst2h.awk
 *
 *******************************************************************/

#define     LOAD_ADDRESS    0x0000      // Change as required
#define     RUN_ADDRESS     0x0000      // Change as required

int code[] =
{
    /* Auto generated from swi.lst
     */
                                        //      ;
                                        //      ; swi.asm
                                        //      ;
                                        //      ; MC6809E emulator test code SWI software interrups.
                                        //      ; Test for command correctness and flag settings.
                                        //      ; All tests will use direct or immediate addressing for simplicity,
                                        //      ; other addressing modes will be tested separately.
                                        //      ;
    0x7e, 0x00, 0x10,                   // 0000             jmp     start
                                        //      ;
                                        // 0001 setcf:      equ     $01
                                        // 00fe clrcf:      equ     $fe
                                        // fffa swi_vec:    equ     $fffa
                                        // ff00 stack:      equ     $ff00
                                        //      ;
                                        // 0003 varstart    equ     *
                                        //      ;
    0xff,                               // 0003 var0:       fcb     $ff
    0x55,                               // 0004 var1:       fcb     $55
    0xaa,                               // 0005 var2:       fcb     $aa
    0x01,                               // 0006 var3:       fcb     $01
    0x80,                               // 0007 var4:       fcb     $80
    0x00,                               // 0008 var5:       fcb     $00
                                        //      ;
                                        // 0009 varend:     equ     *
                                        // 0006 varlen:     equ     varend-varstart
                                        //      ;
    0xdc, 0x03,                         // 0009 swi_serv:   ldd     var0
    0x1e, 0x89,                         // 000b             exg     a,b
    0xdd, 0x03,                         // 000d             std     var0
    0x3b,                               // 000f             rti
                                        //      ;
    0x1c, 0x00,                         // 0010 start:      andcc   #0              ; zero CC bits
                                        //      ;
    0x10, 0xce, 0xff, 0x00,             // 0012             lds     #stack
                                        //      ;
    0x8e, 0xff, 0xfa,                   // 0016             ldx     #swi_vec        ; Set SWI interrupt vector
    0xcc, 0x00, 0x09,                   // 0019             ldd     #swi_serv
    0xed, 0x84,                         // 001c             std     ,x
                                        //      ;
    0xdc, 0x03,                         // 001e             ldd     var0
    0x3f,                               // 0020             swi                     ; initiate the interrupt call
    0xdc, 0x03,                         // 0021             ldd     var0
                                        //      ;
    0x12,                               // 0023 done:       nop
                                        //      ;
                                        //      ; End of test
   -1,                                  // --- end of code ---
};
