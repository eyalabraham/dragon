/********************************************************************
 * .h
 *
 *  Auto-generated by lst2h.awk
 *
 *******************************************************************/

#define     LOAD_ADDRESS    0x0000      // Change as required
#define     RUN_ADDRESS     0x0000      // Change as required

int code[] =
{
    /* Auto generated from arith.lst
     */
                                        //      ;
                                        //      ; arith.asm
                                        //      ;
                                        //      ; MC6809E emulator test code for arithmetic commands.
                                        //      ; Test for command correctness and flag settings.
                                        //      ; All tests will use direct or immediate addressing for simplicity,
                                        //      ; other addressing modes will be tested separately.
                                        //      ;
    0x7e, 0x00, 0x0a,                   // 0000             jmp     start
                                        //      ;
                                        // 0001 setcf:      equ     $01
                                        // 00fe clrcf:      equ     $fe
                                        //      ;
                                        // 0003 varstart    equ     *
                                        //      ;
    0xff,                               // 0003 var0:       fcb     $ff
    0x55,                               // 0004 var1:       fcb     $55
    0xaa,                               // 0005 var2:       fcb     $aa
    0x01,                               // 0006 var3:       fcb     $01
    0x80,                               // 0007 var4:       fcb     $80
    0x00,                               // 0008 var5:       fcb     $00
                                        //      ;
                                        // 0009 varend:     equ     *
                                        // 0006 varlen:     equ     varend-varstart
                                        //      ;
    0x00,                               // 0009 temp:       fcb     0
                                        //      ;
    0x1c, 0x00,                         // 000a start:      andcc   #0              ; clear CC bits
                                        //      ;
                                        //      ; ADD
                                        //      ;
    0xc6, 0x64,                         // 000c             ldb     #100
    0xd7, 0x09,                         // 000e             stb     temp
    0x86, 0x1e,                         // 0010             lda     #30
    0x9b, 0x09,                         // 0012             adda    temp            ; a = 130 ($82, NzVc)
                                        //      ;
                                        //      ; SUB
                                        //      ;
    0xc6, 0x1e,                         // 0014             ldb     #30
    0xd7, 0x09,                         // 0016             stb     temp
    0x86, 0x32,                         // 0018             lda     #50
    0x90, 0x09,                         // 001a             suba    temp            ; a = 20 ($14, nzvc)
    0x90, 0x09,                         // 001c             suba    temp            ; a = -10 ($f6, NzVC)
                                        //      ;
                                        //      ; SBC
                                        //      ;
    0x12,                               // 001e             nop
                                        //      ;
                                        //      ; NEG
                                        //      ;
    0x96, 0x04,                         // 001f             lda     var1
    0x40,                               // 0021             nega
    0xd6, 0x05,                         // 0022             ldb     var2
    0x50,                               // 0024             negb
    0xd7, 0x09,                         // 0025             stb     temp
    0x00, 0x09,                         // 0027             neg     temp
    0xd6, 0x09,                         // 0029             ldb     temp
                                        //      ;
                                        //      ; INC
                                        //      ;
    0x86, 0x00,                         // 002b             lda     #0
    0xc6, 0x08,                         // 002d             ldb     #8
    0xd7, 0x09,                         // 002f             stb     temp
    0x4c,                               // 0031 loop_inc:   inca
    0x0a, 0x09,                         // 0032             dec     temp
    0x10, 0x26, 0xff, 0xf9,             // 0034             lbne    loop_inc
                                        //      ;
                                        //      ; MUL
                                        //      ;
    0x86, 0x08,                         // 0038             lda     #8
    0xc6, 0x22,                         // 003a             ldb     #34
    0x3d,                               // 003c             mul                     ; d = $0110
    0x86, 0xff,                         // 003d             lda     #255
    0xc6, 0x80,                         // 003f             ldb     #128
    0x3d,                               // 0041             mul                     ; d = $7f80
                                        //      ;
                                        //      ; ABX
                                        //      ;
    0x8e, 0x00, 0x03,                   // 0042             ldx     #varstart
    0xc6, 0x01,                         // 0045             ldb     #1
    0x3a,                               // 0047             abx                     ; X = X + 1, no flag change
    0x8e, 0x00, 0x03,                   // 0048             ldx     #varstart
    0xd6, 0x07,                         // 004b             ldb     var4
    0x3a,                               // 004d             abx                     ; X = X + 128 (unsigned addition), no flag change
                                        //      ;
                                        //      ; ADC
                                        //      ;
    0x96, 0x03,                         // 004e             lda     var0
    0x1a, 0x01,                         // 0050             orcc    #setcf
    0x99, 0x08,                         // 0052             adca    var5            ; a = $00, Z=1, C=1, V=1?
                                        //      ;
    0xd6, 0x04,                         // 0054             ldb     var1
    0x1c, 0xfe,                         // 0056             andcc   #clrcf
    0xc9, 0x0a,                         // 0058             adcb    #10             ; b = 5f
                                        //      ;
    0x96, 0x05,                         // 005a             lda     var2
    0x1a, 0x01,                         // 005c             orcc    #setcf
    0x99, 0x07,                         // 005e             adca    var4            ; a = 2b, C=1, V=1
                                        //      ;
                                        //      ; ADD
                                        //      ;
    0x96, 0x03,                         // 0060             lda     var0
    0x9b, 0x06,                         // 0062             adda    var3            ; a = $00, Z=1, C=1, V=1?
                                        //      ;
    0xd6, 0x05,                         // 0064             ldb     var2
    0xdb, 0x07,                         // 0066             addb    var4            ; b = 2a, C=1, V=1
                                        //      ;
    0xdc, 0x07,                         // 0068             ldd     var4            ; big-endian so d = $8000
    0xc3, 0x08, 0x00,                   // 006a             addd    #$800           ; d = $8800
                                        //      ;
                                        //      ; CLR
                                        //      ;
    0x96, 0x03,                         // 006d             lda     var0
    0x4f,                               // 006f             clra
                                        //      ; 
    0xd6, 0x04,                         // 0070             ldb     var1
    0x5f,                               // 0072             clrb
                                        //      ;
    0xd6, 0x04,                         // 0073             ldb     var1            ; b = $55
    0x0f, 0x04,                         // 0075             clr     var1
    0x96, 0x04,                         // 0077             lda     var1            ; a = 0
    0xd7, 0x04,                         // 0079             stb     var1
    0x96, 0x04,                         // 007b             lda     var1            ; a = $55
                                        //      ;
                                        //      ; CMP
                                        //      ;
    0x96, 0x04,                         // 007d             lda     var1            ; a = $55
    0x91, 0x06,                         // 007f             cmpa    var3            ; compare to $01
    0x91, 0x05,                         // 0081             cmpa    var2            ; compare to $aa
                                        //      ;
                                        //      ; DAA
                                        //      ;
    0x86, 0x25,                         // 0083             lda     #$25
    0x8b, 0x48,                         // 0085             adda    #$48
    0x19,                               // 0087             daa                     ; a = 73
                                        //      ;
    0x86, 0x39,                         // 0088             lda     #$39
    0x8b, 0x48,                         // 008a             adda    #$48
    0x19,                               // 008c             daa                     ; a = 87
                                        //      ;
    0x86, 0x72,                         // 008d             lda     #$72
    0x8b, 0x73,                         // 008f             adda    #$73
    0x19,                               // 0091             daa                     ; a = (1)45
                                        //      ;
    0x12,                               // 0092             nop
                                        //      ;
                                        //      ; End of test
   -1,                                  // --- end of code ---
};
