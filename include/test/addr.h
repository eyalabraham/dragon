/********************************************************************
 * .h
 *
 *  Auto-generated by lst2h.awk
 *
 *******************************************************************/

#define     LOAD_ADDRESS    0x0000      // Change as required
#define     RUN_ADDRESS     0x0000      // Change as required

int code[] =
{
    /* Auto generated from addr.lst
     */
                                        //      ;
                                        //      ; addr.asm
                                        //      ;
                                        //      ; MC6809E emulator test code for addressing modes.
                                        //      ; Test for command correctness and flag settings.
                                        //      ; All tests will use direct or immediate addressing for simplicity,
                                        //      ; other addressing modes will be tested separately.
                                        //      ;
    0x7e, 0x00, 0x0d,                   // 0000             jmp     start
                                        //      ;
                                        // 0001 setcf:      equ     $01
                                        // 00fe clrcf:      equ     $fe
                                        //      ;
                                        // 0003 varstart    equ     *
                                        //      ;
    0xff,                               // 0003 var0:       fcb     $ff
    0x55,                               // 0004 var1:       fcb     $55
    0xaa,                               // 0005 var2:       fcb     $aa
    0x01,                               // 0006 var3:       fcb     $01
    0x80,                               // 0007 var4:       fcb     $80
    0x00,                               // 0008 var5:       fcb     $00
                                        //      ;
                                        // 0009 varend:     equ     *
                                        // 0006 varlen:     equ     varend-varstart
                                        //      ;
    0x00, 0x03,                         // 0009 the_start:  fdb     varstart
    0x00, 0x03,                         // 000b temp:       fdb     var0
                                        //      ;
    0x1c, 0x00,                         // 000d start:      andcc   #0              ; zero CC bits
                                        //      ;
                                        //      ;   LEA
                                        //      ;
                                        //      ; Acc A, B, and D offsets
    0xce, 0x00, 0x03,                   // 000f             ldu     #varstart
    0x86, 0x06,                         // 0012             lda     #6
    0xc6, 0xfd,                         // 0014             ldb     #-3
    0x32, 0xc6,                         // 0016             leas    a,u
    0x32, 0xc5,                         // 0018             leas    b,u
    0xcc, 0x00, 0x20,                   // 001a             ldd     #32
    0x30, 0xcb,                         // 001d             leax    d,u
    0xcc, 0xff, 0xe0,                   // 001f             ldd     #-32
    0x32, 0xcb,                         // 0022             leas    d,u
                                        //      ; 5, 8, and 16-bit offset
    0x8e, 0x00, 0x03,                   // 0024             ldx     #varstart
    0x31, 0x84,                         // 0027             leay    0,x
    0x33, 0x07,                         // 0029             leau    7,x
    0x33, 0x1d,                         // 002b             leau    -3,x
    0x32, 0x88, 0x20,                   // 002d             leas    32,x
    0x32, 0x88, 0xe0,                   // 0030             leas    -32,x
    0x32, 0x89, 0x01, 0x00,             // 0033             leas    256,x
    0x32, 0x89, 0xff, 0x00,             // 0037             leas    -256,x
                                        //      ; 16-bit extended indirect
    0xae, 0x9f, 0x00, 0x0b,             // 003b             ldx     [temp]
                                        //      ; LEAX indirect, auto increment by 2, and PC relative
    0x30, 0x9c, 0xc7,                   // 003f             leax    [#the_start,pcr]
    0xc6, 0x06,                         // 0042             ldb     #varlen
    0x57,                               // 0044             asrb
    0x10, 0xae, 0x81,                   // 0045 loop_lea3:  ldy     ,x++
    0x5a,                               // 0048             decb
    0x26, 0xfa,                         // 0049             bne     loop_lea3
                                        //      ;
                                        //      ; LEAX, auto increment, and PC relative
    0x30, 0x8c, 0xb5,                   // 004b             leax    #varstart,pcr
    0xc6, 0x06,                         // 004e             ldb     #varlen
    0xa6, 0x80,                         // 0050 loop_lea2:  lda     ,x+
    0x5a,                               // 0052             decb
    0x26, 0xfb,                         // 0053             bne     loop_lea2
                                        //      ;
                                        //      ; LEAY, auto decrement. and PC relative
    0x31, 0x8d, 0x00, 0x0f,             // 0055             leay    #done,pcr
    0xc6, 0x06,                         // 0059             ldb     #6
    0xa6, 0xa2,                         // 005b loop_lea1:  lda     ,-y
    0x5a,                               // 005d             decb
    0x26, 0xfb,                         // 005e             bne     loop_lea1
                                        //      ;
    0x20, 0x06,                         // 0060             bra     done
                                        //      ;
    0x01,                               // 0062 var10:      fcb     1
    0x02,                               // 0063 var11:      fcb     2
    0x03,                               // 0064 var12:      fcb     3
    0x04,                               // 0065 var13:      fcb     4
    0x05,                               // 0066 var14:      fcb     5
    0x06,                               // 0067 var15:      fcb     6
                                        //      ;
    0x12,                               // 0068 done:       nop
                                        //      ;
                                        //      ; End of test
   -1,                                  // --- end of code ---
};
