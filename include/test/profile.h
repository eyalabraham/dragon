/********************************************************************
 * .h
 *
 *  Auto-generated by lst2h.awk
 *
 *******************************************************************/

#define     LOAD_ADDRESS    0x0000      // Change as required
#define     RUN_ADDRESS     0x0000      // Change as required

int code[] =
{
    /* Auto generated from profile.lst
     */
                                        //      ;
                                        //      ; profile.asm
                                        //      ;
                                        //      ; MC6809E CPU emulation for runing timing profile tests.
                                        //      ;
                                        //      ; This assembly code is used to test emulation timing.
                                        //      ; The code toggles an IO port to generate an external signal
                                        //      ; that can be timed with an oscilloscope.
                                        //      ; The code provide a general driver, and the measurements
                                        //      ; can be added in the "measurement" section for timing.
                                        //      ; Example, measure baseline then measure timing difference
                                        //      ; with a test code that has 10x NOP op-codes. The NOP
                                        //      ; execution time can be estimated by dividing the time difference
                                        //      ; by 10.
                                        //      ;
    0x7e, 0x00, 0x05,                   // 0000             jmp     start
                                        //      ;
                                        // f000 io:         equ     $f000
                                        //      ;
                                        // 0001 io_high:    equ     1
                                        // 0000 io_low:     equ     0
                                        //      ;
                                        // 8000 stack:      equ     $8000
                                        //      ;
                                        // 0003 varstart    equ     *
                                        //      ;
    0x00, 0x00,                         // 0003 temp:       fdb     0
                                        //      ;
                                        // 0005 varend:     equ     *
                                        // 0002 varlen:     equ     varend-varstart
                                        //      ;
                                        //      ; Main routine with an endless loop.
                                        //      ;
    0x10, 0xce, 0x80, 0x00,             // 0005 start:      lds     #stack          ; Set up the stack.
    0x4f,                               // 0009             clra
    0xb7, 0xf0, 0x00,                   // 000a             sta     io              ; Initialize IO
                                        //      ;
    0x4c,                               // 000d test_loop:  inca
    0xb7, 0xf0, 0x00,                   // 000e             sta     io
                                        //      ;
                                        //      ; *** Test section ***
                                        //      ;
    0x12,                               // 0011             nop
    0x12,                               // 0012             nop
    0x12,                               // 0013             nop
    0x12,                               // 0014             nop
    0x12,                               // 0015             nop
    0x12,                               // 0016             nop
    0x12,                               // 0017             nop
    0x12,                               // 0018             nop
    0x12,                               // 0019             nop
    0x12,                               // 001a             nop
                                        //      ;
                                        //      ;
                                        //      ; *** End of test section ***
                                        //      ;
    0x4f,                               // 001b             clra
    0xb7, 0xf0, 0x00,                   // 001c             sta     io
    0x16, 0xff, 0xeb,                   // 001f             lbra    test_loop       ; forever.
                                        //      ;
                                        //      ; End of test
   -1,                                  // --- end of code ---
};
